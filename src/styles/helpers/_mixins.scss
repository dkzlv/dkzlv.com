/// Set padding according to safearea
/// @access public
/// @param {String} $direction — top, bottom, left or right
/// @param {Number} $pixels — number of pixels by default
/// @param {Number} $non-safe-area-pixels — number of pixels, that will be set on non-safe-area devices
@mixin safeAreaPaddingMixin($direction, $pixels, $non-safe-area-pixels: $pixels) {
  padding-#{$direction}: $non-safe-area-pixels;

  @supports (padding: unquote('max(0px)')) {
    padding-#{$direction}: unquote('calc(env(safe-area-inset-#{$direction}) + #{$pixels})');
  }
}

/// Set position (top, bottom) according to safearea
/// @access public
/// @param {String} $position — top, bottom, left or right
/// @param {Number} $pixels — number of pixels by default
@mixin safeAreaPositionPropertyMixin($position, $pixels) {
  #{$position}: $pixels;

  @supports (top: unquote('max(0px)')) {
    #{$position}: unquote('max(#{$pixels}, env(safe-area-inset-#{$position}))');
  }
}

/// Mixin to make object come from opacity 0 to opacity 1 slowly
/// @access public
/// @param {String} $duration — CSS string for duration (eg., 1s)
/// @param {String} $animation — CSS string for animation (eg., ease-in)
@mixin appearFromTransparancy($duration: 1s, $animation: ease-in) {
  opacity: 1;
  transition: opacity $duration $animation;

  &--hidden {
    opacity: 0;
  }
}
